
CREATE TABLE IF NOT EXISTS EVENT (
    EVENT_ID INTEGER PRIMARY KEY,
    EVENT_NAME VARCHAR(100) NOT NULL,
    EVENT_DATE VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS ATTENDEE (
    ATTENDEE_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    PHONE_NUMBER VARCHAR(100),
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS STAFF (
    STAFF_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    ROLE VARCHAR(100) NOT NULL,
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SCHEDULE (
    SCHEDULE_ID INTEGER PRIMARY KEY,
    START_DATE VARCHAR(100) NOT NULL,
    END_DATE VARCHAR(100) NOT NULL,
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TASK (
    TASK_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS VENUE (
    VENUE_ID INTEGER PRIMARY KEY,
    VENUE_NAME VARCHAR(100) NOT NULL,
    LOCATION VARCHAR(100) NOT NULL,
    CAPACITY INTEGER CHECK (CAPACITY >= 0)
);

CREATE TABLE IF NOT EXISTS VENDOR (
    VENDOR_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    AVAILABILITY VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS SUPPLIES (
    SUPPLY_ID INTEGER PRIMARY KEY,
    SUPPLY_NAME VARCHAR(100) NOT NULL,
    QUANTITY INTEGER CHECK (QUANTITY >= 0),
    VENDOR_ID INTEGER NOT NULL,
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR(VENDOR_ID) ON DELETE CASCADE, 
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS WEATHER_CONDITION (
    DATASET_ID INTEGER PRIMARY KEY,
    TEMPERATURE REAL CHECK (TEMPERATURE BETWEEN -50 AND 100),
    WIND_SPEED REAL CHECK (WIND_SPEED BETWEEN 0 AND 100),
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

-- -- Indexes for EVENT_ID foreign keys
CREATE INDEX IF NOT EXISTS idx_attendee_event_id ON ATTENDEE (EVENT_ID);
CREATE INDEX IF NOT EXISTS idx_staff_event_id ON STAFF (EVENT_ID);
CREATE INDEX IF NOT EXISTS idx_schedule_event_id ON SCHEDULE (EVENT_ID);
CREATE INDEX IF NOT EXISTS idx_task_event_id ON TASK (EVENT_ID);
CREATE INDEX IF NOT EXISTS idx_supplies_event_id ON SUPPLIES (EVENT_ID);
CREATE INDEX IF NOT EXISTS idx_weather_condition_event_id ON WEATHER_CONDITION (EVENT_ID);

-- -- Index for VENDOR_ID in SUPPLIES
CREATE INDEX IF NOT EXISTS idx_supplies_vendor_id ON SUPPLIES (VENDOR_ID);

-- -- Index for frequently queried column in EVENT
CREATE INDEX IF NOT EXISTS idx_event_name ON EVENT (EVENT_NAME);

-- -- Index for STAFF roles
CREATE INDEX IF NOT EXISTS idx_staff_role ON STAFF (ROLE);

-- -- Index for VENUE capacity (useful for filtering)
CREATE INDEX IF NOT EXISTS idx_venue_capacity ON VENUE (CAPACITY);

-- -- Index for weather conditions (used for sorting or range queries)
CREATE INDEX IF NOT EXISTS idx_weather_temperature ON WEATHER_CONDITION (TEMPERATURE);
CREATE INDEX IF NOT EXISTS idx_weather_wind_speed ON WEATHER_CONDITION (WIND_SPEED);

-- -- Index for VENDOR availability
CREATE INDEX IF NOT EXISTS idx_vendor_availability ON VENDOR (AVAILABILITY);
